generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Note {
  id            String           @id @default(uuid())
  title         String           // Title of the note
  content       String
  tags          String[]         @default([]) // Optional tags for search/organization
  createdDate   DateTime
  modifiedDate  DateTime?        // Nullable for optional field
  userId        String           // Connects notes to a user
  user          User             @relation(fields: [userId], references: [id])
  children      Note[]           @relation("NoteHierarchy")
  parent        Note?            @relation("NoteHierarchy", fields: [parentId], references: [id])
  parentId      String?          // Reference to parent note
  reviewInfo    NoteReviewInfo[]
}

model NoteReviewInfo{
  id             String    @id @default(uuid())
  nextReviewDate DateTime
  prevReviewDate DateTime
  noteId         String    // Connects review info to a note
  note           Note      @relation(fields: [noteId], references: [id])
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  notes Note[]
}

// Auth

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
